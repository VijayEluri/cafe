package com.goodworkalan.mix;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.goodworkalan.go.go.Commandable;

/**
 * A named series of {@link Task} instances that constitute a program.
 * 
 * @author Alan Gutierrez.
 */
public class Recipe {
    /** The list of commandables that constitutes a program. */
    public final List<Commandable> program;
    
    /** The map of dependency keys to dependencies. */
    private final Map<List<String>, Dependency> dependencies;
    
    /** The class file output directories generated by this recipe. */
    private final Set<File> classes;
    
    /** The list of rebuild test conditions for the recipe. */
    private final List<Rebuild> rebuilds;

    /**
     * Create a new recipe.
     * 
     * @param program
     *            The list of executables.
     * @param dependencies
     *            A map of dependencies.
     * @param classes
     *            The list of output class directories.
     * @param rebuilds
     *            The list of rebuild test conditions for the recipe.
     */
    public Recipe(List<Commandable> program, Map<List<String>, Dependency> dependencies, Set<File> classes, List<Rebuild> rebuilds) {
        this.program = Collections.unmodifiableList(program);
        this.dependencies =  Collections.unmodifiableMap(dependencies);
        this.classes = Collections.unmodifiableSet(classes);
        this.rebuilds = Collections.unmodifiableList(rebuilds);
    }

    /**
     * Get the list of rebuild test conditions for the recipe.
     * 
     * @return The list of rebuild test conditions for the recipe.
     */
    public List<Rebuild> getRebuilds() {
        return rebuilds;
    }
    
    /**
     * Get the list of commandables that constitute a program to run.
     * 
     * @return The program.
     */
    public List<Commandable> getProgram() {
        return program;
    }

    /**
     * Get the list of dependencies for this recipe.
     * 
     * @return The list of dependencies.
     */
    public List<Dependency> getDependencies() {
        return new ArrayList<Dependency>(dependencies.values());
    }

    /**
     * Get a map of the dependencies for this recipe keyed on the unversioned
     * key of the artifact dependency or the recipe name of the recipe
     * dependency.
     * 
     * @return The map of dependencies.
     */
    public Map<List<String>, Dependency> getDependencyMap() {
        return dependencies;
    }

    /**
     * Get the list of class file output output directories.
     * 
     * @return The class file output directories generated by this recipe.
     */
    public Set<File> getClasses() {
        return classes;
    }
}
